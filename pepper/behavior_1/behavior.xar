<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="336.359"><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="264" y="36"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Python Script" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="115" y="47"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import thread, time, json, urllib, urllib2, sys, os, threading, base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        self.connectionToken = None
        self.framemanager = ALProxy("ALFrameManager")
        self.ws = None
        self.ws_connection_retry = 0
        pass

    def onUnload(self):
        self.connectionToken = None
        self.framemanager = None
        self.ws.close()
        self.ws = None
        self.ws_connection_retry = 0
        pass

    def onInput_onStart(self, pepper_id):
        self.init_read_library()
        self.memory.insertData("mino/pepper_id", pepper_id)
        self.init_websocket_connection()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    ## ---- START WEBSOCKET FUNCTIONS ---- ##
    def ws_send_message(self, inputJson):
        try:
            self.log.info("input:" + inputJSON)
            jsonData = json.dumps(inputJson)
            self.log.info("dump:" + jsonData)
            self.ws.send(jsonData)
        except ValueError:
            self.logger.info('ws has error')
        pass

    def ws_on_message(self, ws, message):
        receive = json.loads(message)

        if str(receive["mbit"]) == "1":
            if str(receive["state"]) == "1":
                self.output_mesh1("Aがおされたよ");
        else:
            if str(receive["state"]) == "1":
                self.output_mesh1("Bがおされたよ");


    def ws_on_error(self, ws, error):
        if self.ws_connection_retry < 3 :
            self.logger.info('reconnect ws')
            time.sleep(1)
            self.ws_connection_retry = self.ws_connection_retry + 1
            self.init_websocket_connection()
        else:
            self.output_connection_error()
        pass

    def ws_on_close(self, ws):
        self.logger.info('connection closed')
        pass

    def ws_on_open(self, ws):
        self.ws_connection_retry = 0
        self.logger.info('connection open')
        pass
    ## ---- END WEBSOCKET FUNCTIONS ---- ##


    ## ---- START INITIALIZE ---- ##
    def init_websocket_connection(self):
        import websocket
        websocket.enableTrace(True)

        websocket.setdefaulttimeout(500)

        websocketUrl = "ws://192.168.0.106:8080"

        self.ws = websocket.WebSocketApp(websocketUrl,
            on_message = self.ws_on_message,
            on_error = self.ws_on_error,
            on_close = self.ws_on_close)

        self.ws.on_open = self.ws_on_open

        self.ws.run_forever()

        pass


    def init_read_library(self):
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib/")

        if self.folderName not in sys.path:
            sys.path.append(self.folderName)
    ## ---- END INITIALIZE ---- ##]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output_mesh1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="output_mesh2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>